// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: visits.sql

package database

import (
	"context"
)

const createVisit = `-- name: CreateVisit :one
INSERT INTO visits (id, created_at, updated_at, program_ID, observation, visit, Status, Target, Configuration, StartTime, EndTime)
VALUES (
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)
RETURNING id, created_at, updated_at, program_id, observation, visit, status, target, configuration, starttime, endtime
`

type CreateVisitParams struct {
	ID            int64
	CreatedAt     int64
	UpdatedAt     int64
	ProgramID     int64
	Observation   int64
	Visit         int64
	Status        string
	Target        string
	Configuration string
	Starttime     int64
	Endtime       int64
}

func (q *Queries) CreateVisit(ctx context.Context, arg CreateVisitParams) (Visit, error) {
	row := q.db.QueryRowContext(ctx, createVisit,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ProgramID,
		arg.Observation,
		arg.Visit,
		arg.Status,
		arg.Target,
		arg.Configuration,
		arg.Starttime,
		arg.Endtime,
	)
	var i Visit
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ProgramID,
		&i.Observation,
		&i.Visit,
		&i.Status,
		&i.Target,
		&i.Configuration,
		&i.Starttime,
		&i.Endtime,
	)
	return i, err
}

const getAllVisits = `-- name: GetAllVisits :many
SELECT 
	program_info.id, visits.observation, visits.visit, program_info.title, visits.StartTime, visits.EndTime
FROM
	visits
	JOIN
		program_info
	ON visits.program_ID = program_info.id
WHERE
	visits.StartTime > 0
ORDER BY visits.StartTime
`

type GetAllVisitsRow struct {
	ID          int64
	Observation int64
	Visit       int64
	Title       string
	Starttime   int64
	Endtime     int64
}

func (q *Queries) GetAllVisits(ctx context.Context) ([]GetAllVisitsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllVisits)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllVisitsRow
	for rows.Next() {
		var i GetAllVisitsRow
		if err := rows.Scan(
			&i.ID,
			&i.Observation,
			&i.Visit,
			&i.Title,
			&i.Starttime,
			&i.Endtime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
