// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: program_info.sql

package database

import (
	"context"
)

const createProgram = `-- name: CreateProgram :one
INSERT INTO program_info (id, created_at, updated_at, title, pi, eap, primetime, paralleltime, instrumentmode, programtype)
VALUES (
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?,
	?
)
RETURNING id, created_at, updated_at, title, pi, eap, primetime, paralleltime, instrumentmode, programtype
`

type CreateProgramParams struct {
	ID             int64
	CreatedAt      int64
	UpdatedAt      int64
	Title          string
	Pi             string
	Eap            int64
	Primetime      float64
	Paralleltime   float64
	Instrumentmode string
	Programtype    string
}

func (q *Queries) CreateProgram(ctx context.Context, arg CreateProgramParams) (ProgramInfo, error) {
	row := q.db.QueryRowContext(ctx, createProgram,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Title,
		arg.Pi,
		arg.Eap,
		arg.Primetime,
		arg.Paralleltime,
		arg.Instrumentmode,
		arg.Programtype,
	)
	var i ProgramInfo
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Title,
		&i.Pi,
		&i.Eap,
		&i.Primetime,
		&i.Paralleltime,
		&i.Instrumentmode,
		&i.Programtype,
	)
	return i, err
}

const getProgramIDs = `-- name: GetProgramIDs :many
SELECT 
	DISTINCT id 
FROM 
	program_info
`

func (q *Queries) GetProgramIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getProgramIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
